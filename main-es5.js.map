{"version":3,"sources":["webpack:///ngx-currency-input/src/lib/ngx-currency-input.directive.ts","webpack:///ngx-currency-input/src/lib/ngx-currency-input.module.ts","webpack:///ngx-currency-input/src/public-api.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["CURRENCYDIRECTIVE_VALUE_ACCESSOR","provide","useExisting","CurrencyInputDirective","multi","CURRENCYDIRECTIVE_VALIDAT0R","decimalPipe","elementRef","renderer","injector","formatOnlyOnBlur","decimalPointSeparator","getLocaleDecimalPointSeparator","thousandsSeparator","getLocaleThousandsSeparator","allowedKeys","allowedKeysUsedWithControl","numberWithUpTo2DecimalsRegex","RegExp","previousRawInputValue","localeDecimalPointSeparator","numbersAndDecimalPointSeparatorRegex","ngControl","get","reformatInput","onTouch","rawInputValue","inputEl","event","enteredData","data","hasOnlyOneDecimalSeparatorAtTheEnd","onChange","initialCursorPosition","getCursorPosition","hasNoMoreThan2DecimalDigits","isNumberTooLarge","newRawInputValue","formatPriceToUpTo2Decimal","setNativeInputValue","diffInSeparators","getDiffInSeparators","moveCursor","length","start","end","replaceAt","cursorDiff","isSpecialAllowedKey","isNumberKey","preventDefault","value","parseLocaleStringToNumber","originalValue","index","replacement","substr","key","String","match","includes","isAllowedKeyWithControl","ctrlKey","metaKey","map","toUpperCase","split","join","valueWithoutSeparators","getValueWithoutThousandsSeparator","test","newValue","undefined","with2Decimals","formatPriceTo2Decimal","numberToTransform","transform","numberOfZerosAfterDecimalPointRegex","numberOfZerosAfterFirstDecimalDigitRegex","numberOfZerosAfterDecimalPoint","numberOfZerosAfterFirstDecimalDigit","formatted","slice","oldValue","initialNumberOfSeparators","getNumberOfThousandsSeparators","currentNumberOfSeparators","cleanPattern","cleaned","replace","normalized","parseFloat","setProperty","nativeElement","selectionStart","selectionEnd","position","setSelectionRange","initialPosition","diff","setCursorPosition","numString","example","charAt","fn","valueToEmit","console","log","callbackFunction","isDisabled","getNativeInputValue","control","errors","max","min","Object","keys","selector","providers","NgxCurrencyInputModule","declarations","imports","exports","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","module","id","AppComponent","title","templateUrl","styleUrls","AppModule","bootstrap","environment","production","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Directive, ElementRef, HostListener, forwardRef, Renderer2, Input, Injector, OnInit } from '@angular/core';\nimport { DecimalPipe } from '@angular/common';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  NgControl,\n  AbstractControl,\n  Validator,\n  ValidationErrors\n} from '@angular/forms';\n\nconst CURRENCYDIRECTIVE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyInputDirective),\n  multi: true\n};\n\nconst CURRENCYDIRECTIVE_VALIDAT0R: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CurrencyInputDirective),\n  multi: true\n};\n\ninterface ICursorPosition {\n  start: number;\n  end: number;\n}\n\n@Directive({\n  selector:\n    'input[formControlName][ngxCurrencyInput], input[formControl][ngxCurrencyInput], input[ngModel][ngxCurrencyInput]',\n  providers: [DecimalPipe, CURRENCYDIRECTIVE_VALUE_ACCESSOR, CURRENCYDIRECTIVE_VALIDAT0R]\n})\nexport class CurrencyInputDirective implements ControlValueAccessor, Validator, OnInit {\n  @Input() formatOnlyOnBlur = false;\n  @Input() min: number;\n  @Input() max: number;\n\n  private decimalPointSeparator = this.getLocaleDecimalPointSeparator();\n  private thousandsSeparator = this.getLocaleThousandsSeparator();\n\n  private ngControl: NgControl;\n  private numbersAndDecimalPointSeparatorRegex: RegExp;\n  private readonly allowedKeys: string[] = [\n    'Backspace',\n    'Tab',\n    'End',\n    'Home',\n    'Delete',\n    'Del',\n    'Ctrl',\n    'ArrowLeft',\n    'ArrowRight',\n    'Left',\n    'Right'\n  ];\n  private readonly allowedKeysUsedWithControl: string[] = ['x', 'c', 'v', 'a', 'z'];\n  private numberWithUpTo2DecimalsRegex = new RegExp(`^([0-9]+)?(\\\\${this.decimalPointSeparator}[0-9]?[0-9]?)?$`);\n  private previousRawInputValue = '';\n\n  private onChange: (value: string) => void;\n  private onTouch: () => void;\n\n  constructor(\n    private decimalPipe: DecimalPipe,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private injector: Injector\n  ) {\n    const localeDecimalPointSeparator = this.getLocaleDecimalPointSeparator();\n    this.numbersAndDecimalPointSeparatorRegex = new RegExp(`[0-9${localeDecimalPointSeparator}]`, 'g');\n  }\n\n  ngOnInit() {\n    this.ngControl = this.injector.get(NgControl);\n  }\n\n  @HostListener('blur')\n  handleBlur() {\n    this.reformatInput();\n    this.onTouch();\n  }\n\n  @HostListener('input', ['$event.target.value', '$event.target', '$event'])\n  handleInput(rawInputValue: string, inputEl: HTMLInputElement, event: InputEvent) {\n    const enteredData = event.data;\n    if (enteredData === this.decimalPointSeparator && this.hasOnlyOneDecimalSeparatorAtTheEnd(rawInputValue)) {\n      return;\n    }\n    if (rawInputValue === '') {\n      this.onChange('');\n      return;\n    }\n\n    const initialCursorPosition = this.getCursorPosition(inputEl);\n\n    if (this.hasNoMoreThan2DecimalDigits(rawInputValue) && !this.isNumberTooLarge(rawInputValue)) {\n      const newRawInputValue = this.formatOnlyOnBlur ? rawInputValue : this.formatPriceToUpTo2Decimal(rawInputValue);\n      this.previousRawInputValue = newRawInputValue;\n      this.onChange(newRawInputValue);\n      this.setNativeInputValue(newRawInputValue);\n\n      const diffInSeparators = this.getDiffInSeparators(rawInputValue, newRawInputValue);\n      this.moveCursor(inputEl, initialCursorPosition, diffInSeparators);\n    } else if (\n      enteredData?.length === 1 &&\n      enteredData !== this.decimalPointSeparator &&\n      initialCursorPosition.start !== rawInputValue?.length &&\n      initialCursorPosition.end !== rawInputValue?.length &&\n      !this.isNumberTooLarge(rawInputValue)\n    ) {\n      // This section allows to override numbers after decimal point\n      const newRawInputValue = this.replaceAt(this.previousRawInputValue, initialCursorPosition.start - 1, enteredData);\n      this.previousRawInputValue = newRawInputValue;\n      this.onChange(newRawInputValue);\n      this.setNativeInputValue(newRawInputValue);\n      this.moveCursor(inputEl, initialCursorPosition);\n    } else {\n      this.setNativeInputValue(this.previousRawInputValue);\n      const cursorDiff = enteredData ? -enteredData.length : 0;\n      this.moveCursor(inputEl, initialCursorPosition, cursorDiff);\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  keyDownEvent(event: KeyboardEvent) {\n    if (this.isSpecialAllowedKey(event) || this.isNumberKey(event)) {\n      return;\n    }\n\n    event.preventDefault();\n  }\n\n  private isNumberTooLarge(rawInputValue: string): boolean {\n    const value = this.parseLocaleStringToNumber(rawInputValue);\n    return value >= 10000000000000;\n  }\n\n  private replaceAt(originalValue: string, index: number, replacement: string) {\n    return originalValue.substr(0, index) + replacement + originalValue.substr(index + replacement.length);\n  }\n\n  private isNumberKey(event: KeyboardEvent): boolean {\n    return event.key && event.key.length === 1 && !!String(event.key).match(this.numbersAndDecimalPointSeparatorRegex);\n  }\n\n  private isSpecialAllowedKey(event: KeyboardEvent): boolean {\n    return this.allowedKeys.includes(event.key) || this.isAllowedKeyWithControl(event);\n  }\n\n  private isAllowedKeyWithControl(event: KeyboardEvent): boolean {\n    if (event.ctrlKey || event.metaKey) {\n      return (\n        this.allowedKeysUsedWithControl.includes(event.key) ||\n        this.allowedKeysUsedWithControl.map((key) => key.toUpperCase()).includes(event.key)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  private getValueWithoutThousandsSeparator(value: string): string {\n    return value.split(this.thousandsSeparator).join('');\n  }\n\n  private hasNoMoreThan2DecimalDigits(value: string): boolean {\n    const valueWithoutSeparators = this.getValueWithoutThousandsSeparator(value);\n\n    return this.numberWithUpTo2DecimalsRegex.test(valueWithoutSeparators);\n  }\n\n  private reformatInput(value?: number): void {\n    const newValue = value !== undefined ? value : this.ngControl.value;\n\n    if (newValue || newValue === 0) {\n      const with2Decimals = this.formatPriceTo2Decimal(newValue);\n      this.setNativeInputValue(with2Decimals);\n    } else {\n      this.setNativeInputValue('');\n    }\n  }\n\n  private formatPriceTo2Decimal(value: number | string): string {\n    const numberToTransform = (typeof value === 'string' ? this.parseLocaleStringToNumber(value) : value) || 0;\n\n    return this.decimalPipe.transform(numberToTransform, '1.2-2');\n  }\n\n  private formatPriceToUpTo2Decimal(value: string): string {\n    // TODO: potential for refactor:\n    const numberOfZerosAfterDecimalPointRegex = `^[0-9]*\\\\${this.decimalPointSeparator}(0+)$`;\n    const numberOfZerosAfterFirstDecimalDigitRegex = `^[0-9]*\\\\${this.decimalPointSeparator}[1-9](0+)$`;\n\n    const valueWithoutSeparators = this.getValueWithoutThousandsSeparator(value);\n    const numberOfZerosAfterDecimalPoint =\n      valueWithoutSeparators.match(numberOfZerosAfterDecimalPointRegex)?.[1].length || 0;\n    const numberOfZerosAfterFirstDecimalDigit =\n      valueWithoutSeparators.match(numberOfZerosAfterFirstDecimalDigitRegex)?.[1].length || 0;\n\n    const formatted = this.decimalPipe.transform(this.parseLocaleStringToNumber(valueWithoutSeparators), '1.0-2');\n    if (numberOfZerosAfterDecimalPoint > 0) {\n      return formatted + this.decimalPointSeparator + '00'.slice(0, numberOfZerosAfterDecimalPoint);\n    }\n    if (numberOfZerosAfterFirstDecimalDigit > 0) {\n      return formatted + '0';\n    }\n\n    return formatted;\n  }\n\n  private getNumberOfThousandsSeparators(value: string): number {\n    return (value || '').split(this.thousandsSeparator).length - 1;\n  }\n\n  private getDiffInSeparators(oldValue: string, newValue: string): number {\n    const initialNumberOfSeparators = this.getNumberOfThousandsSeparators(oldValue);\n    const currentNumberOfSeparators = this.getNumberOfThousandsSeparators(newValue);\n\n    return currentNumberOfSeparators - initialNumberOfSeparators;\n  }\n\n  private hasOnlyOneDecimalSeparatorAtTheEnd(value: string): boolean {\n    return value.split(this.decimalPointSeparator).length === 2 && value.slice(-1) === this.decimalPointSeparator;\n  }\n\n  private parseLocaleStringToNumber(value: string): number {\n    const cleanPattern = new RegExp(`[^-+0-9${this.decimalPointSeparator}]`, 'g');\n\n    const cleaned = String(value).replace(cleanPattern, '');\n    const normalized = cleaned.replace(this.decimalPointSeparator, '.');\n\n    return parseFloat(normalized);\n  }\n\n  private setNativeInputValue(value: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', value);\n  }\n\n  private getNativeInputValue(): string {\n    return this.elementRef.nativeElement.value;\n  }\n\n  private getCursorPosition(inputEl: HTMLInputElement): ICursorPosition {\n    return {\n      start: inputEl.selectionStart,\n      end: inputEl.selectionEnd\n    };\n  }\n\n  private setCursorPosition(inputEl: HTMLInputElement, position: ICursorPosition) {\n    inputEl.setSelectionRange(position.start >= 0 ? position.start : 0, position.end >= 0 ? position.end : 0);\n  }\n\n  private moveCursor(inputEl: HTMLInputElement, initialPosition: ICursorPosition, diff: number = 0): void {\n    this.setCursorPosition(inputEl, {\n      start: initialPosition.start + diff,\n      end: initialPosition.end + diff\n    });\n  }\n\n  private numberOfDecimalPlaces(value: number | string): number {\n    const numString = value + '';\n    return numString.split('.')[1]?.length || 0;\n  }\n\n  private getLocaleDecimalPointSeparator() {\n    const example = this.decimalPipe.transform(1.1, '1.1');\n    return example.charAt(1);\n  }\n\n  private getLocaleThousandsSeparator() {\n    const example = this.decimalPipe.transform(1000, '1.0');\n    if (example.length === 5) {\n      return example.charAt(1);\n    } else {\n      return '';\n    }\n  }\n\n  // Value Acecssor Methods:\n  registerOnChange(fn: (value: number) => void): void {\n    this.onChange = (value: string) => {\n      const valueToEmit = value === '' ? null : this.parseLocaleStringToNumber(value);\n      console.log('Emitting value', valueToEmit);\n      fn(valueToEmit);\n    };\n  }\n\n  registerOnTouched(callbackFunction: () => void): void {\n    this.onTouch = callbackFunction;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  writeValue(value: number): void {\n    // Uncomment that if we want to emit coerced value to max 2 decimal points on write\n    // for ex: setting a value i.e: 24.34335456 (whether should we emit immediately 23.34)\n    // if (this.numberOfDecimalPlaces(normalizedValue) > 2) {\n    //   setTimeout(() => {\n    //     this.onChange(this.formatPriceTo2Decimal(normalizedValue));\n    //   }, 1);\n    // }\n    this.reformatInput(value);\n    this.previousRawInputValue = this.getNativeInputValue();\n  }\n\n  validate(control: AbstractControl): ValidationErrors {\n    const errors: ValidationErrors = {};\n    if (control.value > this.max) {\n      errors.max = true;\n    }\n    if (control.value < this.min) {\n      errors.min = true;\n    }\n\n    return Object.keys(errors).length === 0 ? null : errors;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CurrencyInputDirective } from './ngx-currency-input.directive';\n\n@NgModule({\n  declarations: [CurrencyInputDirective],\n  imports: [],\n  exports: [CurrencyInputDirective]\n})\nexport class NgxCurrencyInputModule {}\n","/*\n * Public API Surface of ngx-currency-input\n */\n\nexport * from './lib/ngx-currency-input.directive';\nexport * from './lib/ngx-currency-input.module';\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ngx-currency-input-demo';\n  value: number;\n}\n","\n<input ngxCurrencyInput [(ngModel)]=\"value\">\n\nCurrency value: {{value}}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\nimport { NgxCurrencyInputModule } from '../../../ngx-currency-input/src/public-api';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, FormsModule, NgxCurrencyInputModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"]}